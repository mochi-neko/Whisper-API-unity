#nullable enable
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Mochineko.Whisper_API.Transcription
{
    /// <summary>
    /// Binds Whisper speech to text API.
    /// </summary>
    public sealed class WhisperConnection
    {
        private readonly IReadOnlyDictionary<string, string> headers;
        private readonly APIRequestBody requestBody;

        private static readonly HttpClient httpClient;
        
        internal const string EndPoint = "https://api.openai.com/v1/audio/transcriptions";

        static WhisperConnection()
        {
            // Pooling socket
            httpClient = new HttpClient();
        }

        /// <summary>
        /// Create an instance of Whisper speech to text API connection.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="apiKey">API key generated by OpenAI</param>
        /// <param name="model">Transcription model</param>
        /// <exception cref="ArgumentNullException">API Key must be set</exception>
        public WhisperConnection(string apiKey, Model model = Model.Whisper1)
        {
            if (string.IsNullOrEmpty(apiKey))
            {
                throw new ArgumentNullException(nameof(apiKey));
            }

            this.headers = CreateHeader(apiKey);
            this.requestBody = new APIRequestBody(string.Empty, model);
        }

        /// <summary>
        /// Create an instance of Whisper speech to text API connection.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="apiKey">API key generated by OpenAI</param>
        /// <param name="requestBody">Request parameters</param>
        /// <exception cref="ArgumentNullException">API Key must be set</exception>
        public WhisperConnection(string apiKey, APIRequestBody requestBody)
        {
            if (string.IsNullOrEmpty(apiKey))
            {
                throw new ArgumentNullException(nameof(apiKey));
            }

            this.headers = CreateHeader(apiKey);
            this.requestBody = requestBody;
        }

        /// <summary>
        /// Transcribes audio by Whisper speech to text API.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="file">File path of speech audio</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Response text from Whisper speech to text API.</returns>
        /// <exception cref="Exception">System exceptions</exception>
        /// <exception cref="APIErrorException">API error response</exception>
        /// <exception cref="HttpRequestException">Network error</exception>
        /// <exception cref="TaskCanceledException">Cancellation or timeout</exception>
        /// <exception cref="JsonSerializationException">JSON error</exception>
        /// <exception cref="ArgumentNullException">File path is null or empty</exception>
        /// <exception cref="FileNotFoundException">Audio file not found</exception>
        /// <exception cref="InvalidDataException">Not available audio format</exception>
        /// <exception cref="OperationCanceledException">Cancelled on called</exception>
        public async Task<APIResponseBody> TranscribeAsync(string file, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (string.IsNullOrEmpty(file))
            {
                throw new ArgumentNullException(nameof(file));
            }

            if (!File.Exists(file))
            {
                throw new FileNotFoundException(file);
            }

            if (!APIRequestBody.IsAvailableFormat(file))
            {
                throw new InvalidDataException(file);
            }

            requestBody.File = file;

            using var requestMessage = CreateRequestMessage(headers, requestBody);

            // Post request and receive response
            using var responseMessage = await httpClient.SendAsync(requestMessage, cancellationToken);
            if (responseMessage == null)
            {
                throw new Exception($"[Whisper_API] HttpResponseMessage is null.");
            }

            var responseJson = await responseMessage.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(responseJson))
            {
                throw new Exception($"[Whisper_API] Response JSON is null or empty.");
            }
            
            if (responseMessage.IsSuccessStatusCode)
            {
                var responseBody = APIResponseBody.FromJson(responseJson);
                if (responseBody == null)
                {
                    throw new Exception($"[Whisper_API] Response body is null.");
                }

                return responseBody;
            }
            else if (IsAPIError(responseMessage.StatusCode))
            {
                var errorResponseBody = APIErrorResponseBody.FromJson(responseJson);
                if (errorResponseBody != null)
                {
                    // Handle API error response
                    throw new APIErrorException(responseMessage.StatusCode, errorResponseBody);
                }

                throw new Exception($"[Whisper_API] Error response body is null with status code:{responseMessage.StatusCode}.");
            }
            else // Another error, e.g. 5XX errors.
            {
                // Throws HttpRequestException
                responseMessage.EnsureSuccessStatusCode();

                throw new Exception($"[Whisper_API] It should not be be reached with status code:{responseMessage.StatusCode}.");
            }
        }

        private static IReadOnlyDictionary<string, string> CreateHeader(string apiKey)
            => new Dictionary<string, string>
            {
                ["Authorization"] = $"Bearer {apiKey}",
            };

        private static HttpRequestMessage CreateRequestMessage(
            IReadOnlyDictionary<string, string> headers,
            APIRequestBody requestBody)
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, EndPoint);
            foreach (var header in headers)
            {
                requestMessage.Headers.Add(header.Key, header.Value);
            }

            var requestContent = new StringContent(
                content: requestBody.ToJson(),
                encoding: System.Text.Encoding.UTF8,
                mediaType: "multipart/form-data");

            requestMessage.Content = requestContent;

            return requestMessage;
        }

        private static bool IsAPIError(HttpStatusCode statusCode)
            => 400 <= (int)statusCode && (int)statusCode <= 499;
    }
}