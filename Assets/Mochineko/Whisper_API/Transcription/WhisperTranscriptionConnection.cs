#nullable enable
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace Mochineko.Whisper_API.Transcription
{
    /// <summary>
    /// Binds Whisper speech to text API.
    /// </summary>
    public sealed class WhisperTranscriptionConnection
    {
        private const string EndPoint = "https://api.openai.com/v1/audio/transcriptions";

        private readonly IReadOnlyDictionary<string, string> headers;
        private readonly APIRequestBody requestBody;

        private static readonly HttpClient httpClient;

        static WhisperTranscriptionConnection()
        {
            // Pooling socket
            httpClient = new HttpClient();
        }

        /// <summary>
        /// Create an instance of Whisper speech to text API connection.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="apiKey">API key generated by OpenAI</param>
        /// <param name="model">Transcription model</param>
        /// <exception cref="ArgumentNullException">API Key must be set</exception>
        public WhisperTranscriptionConnection(string apiKey, Model model = Model.Whisper1)
        {
            if (string.IsNullOrEmpty(apiKey))
            {
                throw new ArgumentNullException(nameof(apiKey));
            }

            this.headers = CreateHeader(apiKey);
            this.requestBody = new APIRequestBody(string.Empty, model);
        }

        /// <summary>
        /// Create an instance of Whisper speech to text API connection.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="apiKey">API key generated by OpenAI</param>
        /// <param name="requestBody">Request parameters</param>
        /// <exception cref="ArgumentNullException">API Key must be set</exception>
        public WhisperTranscriptionConnection(string apiKey, APIRequestBody requestBody)
        {
            if (string.IsNullOrEmpty(apiKey))
            {
                throw new ArgumentNullException(nameof(apiKey));
            }

            this.headers = CreateHeader(apiKey);
            this.requestBody = requestBody;
        }

        public async Task<string> TranscribeFromFileAsync(string filePath, CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (string.IsNullOrEmpty(filePath))
            {
                throw new ArgumentNullException(nameof(filePath));
            }

            if (!File.Exists(filePath))
            {
                throw new FileNotFoundException(filePath);
            }

            if (!APIRequestBody.IsAvailableFormat(filePath))
            {
                throw new InvalidDataException(filePath);
            }

            using var stream = File.OpenRead(filePath);

            return await TranscribeAsync(
                fileStream: stream,
                fileName: Path.GetFileName(filePath),
                cancellationToken);
        }

        /// <summary>
        /// Transcribes audio by Whisper speech to text API.
        /// https://platform.openai.com/docs/api-reference/audio/create
        /// </summary>
        /// <param name="fileStream">File data stream of speech audio</param>
        /// <param name="fileName">File name of speech audio</param>
        /// <param name="cancellationToken">Cancellation token</param>
        /// <returns>Response text from Whisper speech to text API.</returns>
        /// <exception cref="Exception">System exceptions</exception>
        /// <exception cref="APIErrorException">API error response</exception>
        /// <exception cref="HttpRequestException">Network error</exception>
        /// <exception cref="TaskCanceledException">Cancellation or timeout</exception>
        /// <exception cref="JsonSerializationException">JSON error</exception>
        /// <exception cref="ArgumentNullException">File path is null or empty</exception>
        /// <exception cref="FileNotFoundException">Audio file not found</exception>
        /// <exception cref="InvalidDataException">Not available audio format</exception>
        /// <exception cref="OperationCanceledException">Cancelled on called</exception>
        public async Task<string> TranscribeAsync(
            Stream fileStream,
            string fileName,
            CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();

            if (fileStream == null)
            {
                throw new ArgumentNullException(nameof(fileStream));
            }

            if (string.IsNullOrEmpty(fileName))
            {
                throw new ArgumentNullException(nameof(fileName));
            }

            if (!APIRequestBody.IsAvailableFormat(fileName))
            {
                throw new InvalidDataException(fileName);
            }

            requestBody.File = fileName;

            using var requestMessage = CreateRequestMessage(
                headers,
                requestBody,
                fileStream);

            // Post request and receive response
            using var responseMessage = await httpClient.SendAsync(requestMessage, cancellationToken);
            if (responseMessage == null)
            {
                throw new Exception($"[Whisper_API] HttpResponseMessage is null.");
            }

            var responseText = await responseMessage.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(responseText))
            {
                throw new Exception($"[Whisper_API] Response JSON is null or empty.");
            }

            if (responseMessage.IsSuccessStatusCode)
            {
                // Text format is determined by request parameter:"response_format".
                return responseText;
            }
            else
            {
                var errorResponseBody = APIErrorResponseBody.FromJson(responseText);
                if (errorResponseBody != null)
                {
                    // Handle API error response
                    throw new APIErrorException(responseMessage.StatusCode, errorResponseBody);
                }
                else
                {
                    // Error without error response
                    responseMessage.EnsureSuccessStatusCode();

                    throw new Exception(
                        $"[Whisper_API] It should not be be reached with status code:{responseMessage.StatusCode}.");
                }
            }
        }

        private static IReadOnlyDictionary<string, string> CreateHeader(string apiKey)
            => new Dictionary<string, string>
            {
                ["Authorization"] = $"Bearer {apiKey}",
            };

        private static HttpRequestMessage CreateRequestMessage(
            IReadOnlyDictionary<string, string> headers,
            APIRequestBody requestBody,
            Stream fileStream)
        {
            var requestMessage = new HttpRequestMessage(HttpMethod.Post, EndPoint);
            foreach (var header in headers)
            {
                requestMessage.Headers.Add(header.Key, header.Value);
            }

            var requestContent = new MultipartFormDataContent();

            requestContent.Add(
                content: new StringContent(
                    content: $"{requestBody.Model}",
                    encoding: System.Text.Encoding.UTF8),
                name: "model");

            requestContent.Add(
                content: new StreamContent(content: fileStream),
                name: "file",
                fileName: requestBody.File);

            requestMessage.Content = requestContent;

            return requestMessage;
        }
    }
}